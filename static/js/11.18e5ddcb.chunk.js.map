{"version":3,"sources":["../../src/implementation/constants.ts","../../src/implementation/error.ts","../../src/implementation/string.ts","../../src/implementation/taskenums.ts","../../src/implementation/xhrio.ts","../../src/implementation/xhrio_network.ts","../../src/implementation/xhriopool.ts","../../src/implementation/type.ts","../../src/implementation/fs.ts","../../src/implementation/blob.ts","../../src/implementation/location.ts","../../src/implementation/json.ts","../../src/implementation/path.ts","../../src/implementation/url.ts","../../src/implementation/metadata.ts","../../src/implementation/list.ts","../../src/implementation/requestinfo.ts","../../src/implementation/requests.ts","../../src/implementation/observer.ts","../../src/tasksnapshot.ts","../../src/implementation/async.ts","../../src/task.ts","../../src/reference.ts","../../compat/tasksnapshot.ts","../../compat/task.ts","../../compat/list.ts","../../compat/reference.ts","../../src/implementation/failrequest.ts","../../src/implementation/request.ts","../../src/implementation/backoff.ts","../../src/service.ts","../../compat/service.ts","../../compat/index.ts"],"names":["DEFAULT_HOST","code","message","prependCode","customData","serverResponse","Object","setPrototypeOf","FirebaseStorageError","prototype","codeEquals","this","Code","unknown","cannotSliceBlob","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","value","decoded","decodeURIComponent","e","percentEncodedBytes_","dataURLBytes_","b","i","length","c","charCodeAt","push","Uint8Array","hasMinus","indexOf","hasUnder","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","s","end","substring","ErrorCode","TaskEvent","STATE_CHANGED","InternalTaskState","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","sent_","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","resolve","addEventListener","ABORT","NETWORK_ERROR","send","url","method","body","headers","open","undefined","key","hasOwnProperty","setRequestHeader","toString","getErrorCode","getStatus","status","getResponseText","responseText","abort","getResponseHeader","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener","createXhrIo","NetworkXhrIo","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","args","append","type.isNativeBlobDefined","elideCopy","size","blobType","type.isNativeBlob","data_","type","ArrayBuffer","byteLength","set","size_","type_","slice","startByte","endByte","sliced","blob","start","webkitSlice","mozSlice","fs.sliceBlob","FbsBlob","buffer","blobby","map","val","fs.getBlob","apply","uint8Arrays","type.isString","forEach","uploadData","bucket","path","path_","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","bucketLocation","Location","makeFromUrl","location","bucketDomain","gsRegex","RegExp","httpModify","loc","firebaseStorageHost","groups","regex","indices","postModify","charAt","group","captures","exec","bucketValue","pathValue","invalidUrl","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","index","lastIndexOf","makeUrl","urlPart","makeQueryString","params","queryPart","noXform_","metadata","server","local","writable","xform","mappings_","getMappings","mappings","Mapping","nameMapping","_metadata","fullPath","path.lastComponent","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","get","makeStorageReference","addRef","fromResourceString","resourceString","json.jsonObjectOrNull","toResourceString","stringify","fromResponseString","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromBackendResponse","handler","timeout","urlParams","errorHandler","progressCallback","successCodes","additionalRetryCodes","handlerCheck","cndn","metadataHandler","xhr","text","MetadataUtils.fromResourceString","downloadUrlHandler","tokens","split","token","UrlUtils.makeUrl","UrlUtils.makeQueryString","alt","MetadataUtils.downloadUrlFromResourceString","sharedErrorHandler","err","newErr","objectErrorHandler","shared","getMetadata","maxOperationRetryTime","requestInfo","RequestInfo","list","delimiter","pageToken","maxResults","isRoot","ListResultUtils.fromResponseString","listHandler","metadataForUpload_","metadataClone","assign","determineContentType_","current","total","finalized","checkResumeHeader_","allowed","resumableUploadChunkSize","continueResumableUpload","chunkSize","status_","ResumableUploadStatus","bytesLeft","bytesToUpload","Math","min","maxUploadRetryTime","uploadStatus","newCurrent","nextOrObserver","error","complete","next","observer","bytesTransferred","totalBytes","task","ref","f","then","argsToForward","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","reject","_start","_makeProgressCallback","sizeBefore","loaded","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","callback","storage","getAuthToken","authToken","metadataForUpload","MetadataUtils.toResourceString","fbsRequests.createResumableUpload","_location","createRequest","makeRequest","getPromise","sizeString","isNaN","fbsRequests.getResumableUploadStatus","statusRequest","fbsRequests.resumableUploadChunkSize","fbsRequests.ResumableUploadStatus","fbsRequests.continueResumableUpload","uploadRequest","newStatus","_increaseMultiplier","fbsRequests.getMetadata","metadataRequest","boundary","str","random","genBoundary","metadata_","preBlobPart","postBlobPart","fbsRequests.multipartUpload","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","UploadTaskSnapshot","on","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","triggered","fbsAsync","bind","snapshot","resume","valid","pause","_service","newRef","Reference","newPath","_throwIfRoot","listAll","accumulator","listAllHelper","nextPage","options","op","requestsList","updateMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","_xhr","_text","requestsDeleteObject","getChild","childPath","canonicalChildPath","filter","component","join","child","_delegate","_snapshot","UploadTaskSnapshotCompat","wrappedNextOrObserver","taskSnapshot","ReferenceCompat","root","parent","put","UploadTaskCompat","UploadTask","uploadBytesResumable","putString","uploadString","r","ListResultCompat","requestsGetMetadata","delete","promise_","_appDelete","errorCallback","pool","pendingXhr_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","self","backoffDone","requestWentThrough","wasSuccessCode","result","canceled","RequestEndStatus","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","setTimeout","success","call","waitMillis","stopped","stop","wasTimeout","clearTimeout","backoff.start","backoffCallback","progressListener","hitServer","isRetryStatusCode_","successCode","wasCanceled","progressEvent","lengthComputable","appDelete","backoff.stop","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","appId","addGmpidHeader_","addAuthHeader_","version","SDK_VERSION","addVersionHeader_","NetworkRequest","isUrl","test","refFromPath","_bucket","includes","serviceOrRef","pathOrUrl","app","_authProvider","_pool","_url","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","config","extractBucket","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_delete","request","clear","FailRequest","add","INTERNAL","refFromURL","setMaxUploadRetryTime","setMaxOperationRetryTime","factory","container","getProvider","authProvider","StorageServiceCompat","XhrIoPool","instance","namespaceExports","Storage","registerComponent","setServiceProps","setMultipleInstances","registerVersion","registerStorage"],"mappings":"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","file":"static/js/11.18e5ddcb.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\nexport class FirebaseStorageError extends FirebaseError {\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  constructor(code: Code, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  codeEquals(code: Code): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\nexport type Code = string;\nexport const Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nexport function prependCode(code: Code): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    Code.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    Code.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirebaseStorageError } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as type from './type';\nimport { Code, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        Code.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport * as fs from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport * as type from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (type.isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (type.isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = fs.sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (type.isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(fs.getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (type.isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (type.isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport * as json from './json';\nimport { Location } from './location';\nimport * as path from './path';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!type.isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return path.lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!type.isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = UrlUtils.makeUrl(urlPart);\n    const queryString = UrlUtils.makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Metadata,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport * as json from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service.makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service.makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport * as MetadataUtils from './metadata';\nimport * as ListResultUtils from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = ListResultUtils.fromResponseString(\n      service,\n      bucket,\n      text\n    );\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return MetadataUtils.downloadUrlFromResourceString(\n      metadata as Metadata,\n      text\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Metadata,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = MetadataUtils.toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = MetadataUtils.toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = MetadataUtils.toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(type.isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const resumableUploadChunkSize: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: MetadataUtils.Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\nimport { FirebaseStorageError } from './error';\n\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirebaseStorageError) => void;\nexport type CompleteFn = () => void;\nexport type Unsubscribe = () => void;\n\nexport interface StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      type.isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TaskState } from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport { Reference } from './reference';\nimport { UploadTask } from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(\n    readonly bytesTransferred: number,\n    readonly totalBytes: number,\n    readonly state: TaskState,\n    readonly metadata: Metadata,\n    readonly task: UploadTask,\n    readonly ref: Reference\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { canceled, Code, FirebaseStorageError } from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport * as fbsMetadata from './implementation/metadata';\nimport * as fbsRequests from './implementation/requests';\nimport { Reference } from './reference';\nimport { getMappings } from './implementation/metadata';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * @internal\n   */\n  _blob: FbsBlob;\n  /**\n   * @internal\n   */\n  _metadata: Metadata | null;\n  private _mappings: fbsMetadata.Mappings;\n  /**\n   * @internal\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * @internal\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error.codeEquals(Code.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error.codeEquals(Code.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage.getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as fbsRequests.ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n    const status = new fbsRequests.ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = fbsRequests.continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest\n        .getPromise()\n        .then((newStatus: fbsRequests.ResumableUploadStatus) => {\n          this._increaseMultiplier();\n          this._request = undefined;\n          this._updateProgress(newStatus.current);\n          if (newStatus.finalized) {\n            this._metadata = newStatus.metadata;\n            this._transition(InternalTaskState.SUCCESS);\n          } else {\n            this.completeTransitions_();\n          }\n        }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return new UploadTaskSnapshot(\n      this._transferred,\n      this._blob.size(),\n      externalState,\n      this._metadata!,\n      this,\n      this._ref\n    );\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject\n} from './implementation/requests';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListOptions, ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  /**\n   * @internal\n   */\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @returns The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * @returns An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this.newRef(this._service, location);\n  }\n\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads a blob to this object's location.\n * @public\n * @param ref - Storage Reference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata: Metadata | null = null\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * @public\n * @param ref - Storage Reference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded object.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('putString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - Storage Reference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @internal\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - Storage Reference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage.getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - Storage Reference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - Storage Reference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Metadata\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - Storage Reference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n * @internal\n *\n * @param ref - Storage Reference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n */\nexport function getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { Metadata } from '../src/metadata';\n\nexport class UploadTaskSnapshotCompat implements types.UploadTaskSnapshot {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): Metadata {\n    return this._delegate.metadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTask } from '../src/task';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { TaskEvent } from '../src/implementation/taskenums';\nimport * as types from '@firebase/storage-types';\nimport {\n  StorageObserver,\n  ErrorFn,\n  CompleteFn,\n  Subscribe,\n  Unsubscribe\n} from '../src/implementation/observer';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport { FirebaseStorageError } from '../src/implementation/error';\n\nexport class UploadTaskCompat implements types.UploadTask {\n  private readonly _snapshot: UploadTaskSnapshotCompat;\n  constructor(\n    private readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {\n    this._snapshot = new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return this._snapshot;\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ErrorFn | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ListResult } from '../src/list';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\n\nexport class ListResultCompat implements types.ListResult {\n  constructor(\n    private readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Reference,\n  getChild,\n  uploadBytesResumable,\n  uploadString,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject\n} from '../src/reference';\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { StringFormat } from '../src/implementation/string';\nimport { ListOptions } from '../src/list';\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\nimport { invalidRootOperation } from '../src/implementation/error';\n\nexport class ReferenceCompat implements types.Reference {\n  constructor(\n    private readonly _delegate: Reference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    return new UploadTaskCompat(\n      uploadString(this._delegate, value, format, metadata),\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    return getMetadata(this._delegate);\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    return updateMetadata(this._delegate, metadata);\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport firebase from '@firebase/app';\nimport * as backoff from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoff.id | null = null;\n  private resolve_!: (value?: T | PromiseLike<T> | undefined) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (type.isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      backoff.stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(headers: Headers): void {\n  const version =\n    typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool\n): Request<T> {\n  const queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n} from '@firebase/app-types-exp';\nimport * as constants from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[constants.CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  /**\n   * @internal\n   */\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    readonly app: FirebaseApp,\n    /**\n     * @internal\n     */\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _pool: XhrIoPool,\n    /**\n     * @internal\n     */\n    readonly _url?: string\n  ) {\n    this._maxOperationRetryTime = constants.DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = constants.DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   * @internal\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @internal\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { StorageService, isUrl, ref } from '../src/service';\nimport { Location } from '../src/implementation/location';\nimport { ReferenceCompat } from './reference';\nimport { invalidArgument } from '../src/implementation/error';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat implements types.FirebaseStorage {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from '../src/implementation/string';\nimport { TaskEvent, TaskState } from '../src/implementation/taskenums';\n\nimport { XhrIoPool } from '../src/implementation/xhriopool';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { StorageService } from '../src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  url?: string\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(app, authProvider, new XhrIoPool(), url)\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"],"sourceRoot":""}